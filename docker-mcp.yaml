# Docker MCP Gateway Server Configuration
# This file defines the n8n MCP server for Docker's MCP Gateway ecosystem

apiVersion: v1
kind: MCPServerCatalog
metadata:
  name: n8n-mcp-server
  version: "1.0.0"
  description: "Model Context Protocol server for n8n workflow automation"
  author: "eekfonky"
  license: "MIT"
  homepage: "https://github.com/eekfonky/n8n-mcp-server"
  repository: "https://github.com/eekfonky/n8n-mcp-server"

spec:
  # Docker image configuration
  image:
    repository: "n8n-mcp-server"
    tag: "latest"
    pullPolicy: "IfNotPresent"

  # MCP server capabilities
  capabilities:
    tools: true
    resources: true
    prompts: false
    sampling: false

  # Supported transports
  transports:
    - stdio
    - sse
    - streaming

  # Environment configuration
  environment:
    required:
      - name: "N8N_BASE_URL"
        description: "Base URL of the n8n instance"
        type: "string"
        example: "http://localhost:5678"
      - name: "N8N_API_KEY"
        description: "n8n API key for authentication"
        type: "secret"
        secretRef: "n8n-api-key"
    optional:
      - name: "LOG_LEVEL"
        description: "Logging level"
        type: "string"
        default: "info"
        enum: ["debug", "info", "warn", "error"]
      - name: "RATE_LIMIT_REQUESTS_PER_MINUTE"
        description: "API rate limiting"
        type: "number"
        default: 60
      - name: "CACHE_TTL_SECONDS"
        description: "Cache TTL in seconds"
        type: "number"
        default: 300

  # Security configuration
  security:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

  # Resource limits
  resources:
    limits:
      cpu: "500m"
      memory: "256Mi"
      ephemeral-storage: "1Gi"
    requests:
      cpu: "100m"
      memory: "128Mi"
      ephemeral-storage: "100Mi"

  # Health checks
  health:
    startup:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 10
    liveness:
      enabled: true
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      enabled: true
      periodSeconds: 10
      timeoutSeconds: 3
      failureThreshold: 3

  # Tools provided by this server
  tools:
    - name: "list_workflows"
      description: "List all workflows in the n8n instance"
      category: "workflow"
      tags: ["n8n", "workflow", "list"]
    - name: "get_workflow"
      description: "Get detailed information about a specific workflow"
      category: "workflow"
      tags: ["n8n", "workflow", "details"]
    - name: "execute_workflow"
      description: "Execute a workflow manually"
      category: "workflow"
      tags: ["n8n", "workflow", "execute"]
    - name: "create_workflow"
      description: "Create a new workflow"
      category: "workflow"
      tags: ["n8n", "workflow", "create"]
    - name: "update_workflow"
      description: "Modify an existing workflow"
      category: "workflow"
      tags: ["n8n", "workflow", "update"]
    - name: "activate_workflow"
      description: "Activate a workflow for automatic execution"
      category: "workflow"
      tags: ["n8n", "workflow", "activate"]
    - name: "deactivate_workflow"
      description: "Deactivate a workflow"
      category: "workflow"
      tags: ["n8n", "workflow", "deactivate"]
    - name: "delete_workflow"
      description: "Delete a workflow permanently"
      category: "workflow"
      tags: ["n8n", "workflow", "delete"]
    - name: "get_execution"
      description: "Get details about a specific workflow execution"
      category: "execution"
      tags: ["n8n", "execution", "monitoring"]
    - name: "get_executions"
      description: "List workflow executions"
      category: "execution"
      tags: ["n8n", "execution", "list"]
    - name: "discover_nodes"
      description: "Find all available n8n nodes including community nodes"
      category: "nodes"
      tags: ["n8n", "nodes", "discovery"]
    - name: "get_node_info"
      description: "Get detailed information about a specific node type"
      category: "nodes"
      tags: ["n8n", "nodes", "info"]
    - name: "search_nodes"
      description: "Search for nodes by name, description, or functionality"
      category: "nodes"
      tags: ["n8n", "nodes", "search"]
    - name: "get_community_nodes"
      description: "List community/custom nodes installed in the n8n instance"
      category: "nodes"
      tags: ["n8n", "nodes", "community"]
    - name: "get_nodes_by_category"
      description: "Browse nodes by category"
      category: "nodes"
      tags: ["n8n", "nodes", "category"]
    - name: "validate_node_config"
      description: "Validate a node configuration against its schema"
      category: "nodes"
      tags: ["n8n", "nodes", "validation"]

  # Resources provided by this server
  resources:
    - uri: "n8n://workflows"
      name: "Workflows List"
      description: "Complete list of all workflows"
      mimeType: "application/json"
    - uri: "n8n://workflow/{id}"
      name: "Workflow Details"
      description: "Detailed information about a specific workflow"
      mimeType: "application/json"
    - uri: "n8n://nodes"
      name: "Available Nodes"
      description: "List of all available n8n nodes"
      mimeType: "application/json"
    - uri: "n8n://nodes/category/{category}"
      name: "Nodes by Category"
      description: "Nodes filtered by category"
      mimeType: "application/json"
    - uri: "n8n://executions"
      name: "Execution History"
      description: "Recent workflow executions and their status"
      mimeType: "application/json"
    - uri: "n8n://stats"
      name: "Instance Statistics"
      description: "Statistics about the n8n instance"
      mimeType: "application/json"

  # Gateway configuration
  gateway:
    enabled: true
    endpoints:
      - path: "/n8n"
        transport: "sse"
        description: "SSE endpoint for n8n MCP server"
      - path: "/n8n/stream"
        transport: "streaming"
        description: "Streaming HTTP endpoint for n8n MCP server"
    authentication:
      type: "apikey"
      secretRef: "n8n-api-key"
    rateLimit:
      rpm: 60
      burst: 10

  # Integration examples
  examples:
    claude_desktop:
      transport: "stdio"
      command: "docker"
      args:
        - "run"
        - "--rm"
        - "-i"
        - "--network=host"
        - "-e=N8N_BASE_URL"
        - "-e=N8N_API_KEY"
        - "n8n-mcp-server:latest"
      env:
        N8N_BASE_URL: "http://localhost:5678"
        N8N_API_KEY: "your-api-key-here"
    gateway_sse:
      transport: "sse"
      endpoint: "http://localhost:8080/n8n"
      authentication: "bearer_token"
    gateway_streaming:
      transport: "streaming"
      endpoint: "http://localhost:8080/n8n/stream"
      authentication: "bearer_token"