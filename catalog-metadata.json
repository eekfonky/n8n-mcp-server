{
  "apiVersion": "mcp.docker.com/v1",
  "kind": "MCPServer",
  "metadata": {
    "name": "n8n-mcp-server",
    "namespace": "mcp",
    "labels": {
      "category": "workflow-automation",
      "vendor": "eekfonky",
      "integration": "n8n"
    },
    "annotations": {
      "mcp.docker.com/description": "Model Context Protocol server for n8n workflow automation",
      "mcp.docker.com/documentation": "https://github.com/eekfonky/n8n-mcp-server",
      "mcp.docker.com/license": "MIT",
      "mcp.docker.com/maintainer": "eekfonky",
      "mcp.docker.com/source": "https://github.com/eekfonky/n8n-mcp-server",
      "mcp.docker.com/version": "1.0.0"
    }
  },
  "spec": {
    "displayName": "n8n Workflow Automation",
    "description": "Connect AI models to n8n workflow automation platform. Manage workflows, execute automations, discover community nodes, and monitor executions through a comprehensive MCP interface.",
    "icon": "https://raw.githubusercontent.com/eekfonky/n8n-mcp-server/main/assets/icon.png",
    "publisher": {
      "name": "eekfonky",
      "url": "https://github.com/eekfonky",
      "support": "https://github.com/eekfonky/n8n-mcp-server/issues"
    },
    "image": {
      "repository": "mcp/n8n-workflow-server",
      "tag": "1.0.0",
      "digest": "sha256:placeholder",
      "platforms": [
        "linux/amd64",
        "linux/arm64"
      ]
    },
    "category": "Workflow Automation",
    "tags": [
      "workflow",
      "automation",
      "n8n",
      "integration",
      "api",
      "nocode",
      "triggers",
      "actions"
    ],
    "capabilities": {
      "tools": {
        "count": 16,
        "categories": ["workflow", "execution", "nodes"]
      },
      "resources": {
        "count": 6,
        "types": ["workflows", "nodes", "executions", "statistics"]
      },
      "prompts": {
        "count": 0
      },
      "transports": ["stdio", "sse", "streaming"]
    },
    "requirements": {
      "n8n": {
        "version": ">=1.0.0",
        "apiAccess": true,
        "description": "Requires n8n instance with API access enabled"
      }
    },
    "configuration": {
      "required": [
        {
          "name": "N8N_BASE_URL",
          "type": "string",
          "description": "Base URL of your n8n instance",
          "example": "http://localhost:5678",
          "validation": "^https?://.+"
        },
        {
          "name": "N8N_API_KEY",
          "type": "secret",
          "description": "n8n API key for authentication",
          "secretRef": "n8n-api-key",
          "required": true
        }
      ],
      "optional": [
        {
          "name": "LOG_LEVEL",
          "type": "enum",
          "description": "Logging verbosity level",
          "default": "info",
          "options": ["debug", "info", "warn", "error"]
        },
        {
          "name": "RATE_LIMIT_REQUESTS_PER_MINUTE",
          "type": "number",
          "description": "API rate limiting (requests per minute)",
          "default": 60,
          "min": 1,
          "max": 1000
        },
        {
          "name": "CACHE_TTL_SECONDS",
          "type": "number",
          "description": "Cache time-to-live in seconds",
          "default": 300,
          "min": 0,
          "max": 3600
        }
      ]
    },
    "tools": [
      {
        "name": "list_workflows",
        "description": "List all workflows in the n8n instance",
        "category": "workflow",
        "inputSchema": {
          "type": "object",
          "properties": {}
        }
      },
      {
        "name": "get_workflow",
        "description": "Get detailed information about a specific workflow",
        "category": "workflow",
        "inputSchema": {
          "type": "object",
          "properties": {
            "id": {"type": "string", "description": "Workflow ID"}
          },
          "required": ["id"]
        }
      },
      {
        "name": "execute_workflow",
        "description": "Execute a workflow manually",
        "category": "workflow",
        "inputSchema": {
          "type": "object",
          "properties": {
            "id": {"type": "string", "description": "Workflow ID"},
            "data": {"type": "object", "description": "Input data"}
          },
          "required": ["id"]
        }
      },
      {
        "name": "create_workflow",
        "description": "Create a new workflow",
        "category": "workflow",
        "inputSchema": {
          "type": "object",
          "properties": {
            "name": {"type": "string", "description": "Workflow name"},
            "nodes": {"type": "array", "description": "Workflow nodes"},
            "connections": {"type": "object", "description": "Node connections"}
          },
          "required": ["name", "nodes"]
        }
      },
      {
        "name": "update_workflow",
        "description": "Modify an existing workflow",
        "category": "workflow",
        "inputSchema": {
          "type": "object",
          "properties": {
            "id": {"type": "string", "description": "Workflow ID"}
          },
          "required": ["id"]
        }
      },
      {
        "name": "activate_workflow",
        "description": "Activate a workflow for automatic execution",
        "category": "workflow",
        "inputSchema": {
          "type": "object",
          "properties": {
            "id": {"type": "string", "description": "Workflow ID"}
          },
          "required": ["id"]
        }
      },
      {
        "name": "deactivate_workflow",
        "description": "Deactivate a workflow",
        "category": "workflow",
        "inputSchema": {
          "type": "object",
          "properties": {
            "id": {"type": "string", "description": "Workflow ID"}
          },
          "required": ["id"]
        }
      },
      {
        "name": "delete_workflow",
        "description": "Delete a workflow permanently",
        "category": "workflow",
        "inputSchema": {
          "type": "object",
          "properties": {
            "id": {"type": "string", "description": "Workflow ID"}
          },
          "required": ["id"]
        }
      },
      {
        "name": "get_execution",
        "description": "Get details about a specific workflow execution",
        "category": "execution",
        "inputSchema": {
          "type": "object",
          "properties": {
            "id": {"type": "string", "description": "Execution ID"}
          },
          "required": ["id"]
        }
      },
      {
        "name": "get_executions",
        "description": "List workflow executions",
        "category": "execution",
        "inputSchema": {
          "type": "object",
          "properties": {
            "workflowId": {"type": "string", "description": "Filter by workflow ID"},
            "limit": {"type": "number", "description": "Maximum results", "default": 20}
          }
        }
      },
      {
        "name": "discover_nodes",
        "description": "Find all available n8n nodes including community nodes",
        "category": "nodes",
        "inputSchema": {
          "type": "object",
          "properties": {
            "forceRefresh": {"type": "boolean", "description": "Force cache refresh", "default": false}
          }
        }
      },
      {
        "name": "get_node_info",
        "description": "Get detailed information about a specific node type",
        "category": "nodes",
        "inputSchema": {
          "type": "object",
          "properties": {
            "nodeName": {"type": "string", "description": "Node type name"}
          },
          "required": ["nodeName"]
        }
      },
      {
        "name": "search_nodes",
        "description": "Search for nodes by name, description, or functionality",
        "category": "nodes",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {"type": "string", "description": "Search query"}
          },
          "required": ["query"]
        }
      },
      {
        "name": "get_community_nodes",
        "description": "List community/custom nodes installed in the n8n instance",
        "category": "nodes",
        "inputSchema": {
          "type": "object",
          "properties": {}
        }
      },
      {
        "name": "get_nodes_by_category",
        "description": "Browse nodes by category",
        "category": "nodes",
        "inputSchema": {
          "type": "object",
          "properties": {
            "category": {"type": "string", "description": "Node category filter"}
          }
        }
      },
      {
        "name": "validate_node_config",
        "description": "Validate a node configuration against its schema",
        "category": "nodes",
        "inputSchema": {
          "type": "object",
          "properties": {
            "nodeName": {"type": "string", "description": "Node type name"},
            "config": {"type": "object", "description": "Node configuration"}
          },
          "required": ["nodeName", "config"]
        }
      }
    ],
    "resources": [
      {
        "uri": "n8n://workflows",
        "name": "Workflows List",
        "description": "Complete list of all workflows with metadata",
        "mimeType": "application/json"
      },
      {
        "uri": "n8n://workflow/{id}",
        "name": "Workflow Details",
        "description": "Detailed workflow information including nodes and connections",
        "mimeType": "application/json"
      },
      {
        "uri": "n8n://nodes",
        "name": "Available Nodes",
        "description": "Comprehensive list of available n8n nodes",
        "mimeType": "application/json"
      },
      {
        "uri": "n8n://nodes/category/{category}",
        "name": "Nodes by Category",
        "description": "Nodes filtered by specific category",
        "mimeType": "application/json"
      },
      {
        "uri": "n8n://executions",
        "name": "Execution History",
        "description": "Recent workflow executions with status and metrics",
        "mimeType": "application/json"
      },
      {
        "uri": "n8n://stats",
        "name": "Instance Statistics",
        "description": "Comprehensive statistics about the n8n instance",
        "mimeType": "application/json"
      }
    ],
    "examples": {
      "quickStart": {
        "title": "Quick Start Guide",
        "description": "Get started with n8n workflow automation",
        "steps": [
          {
            "action": "list_workflows",
            "description": "List all available workflows",
            "params": {}
          },
          {
            "action": "execute_workflow",
            "description": "Run a specific workflow",
            "params": {
              "id": "workflow-id-here"
            }
          },
          {
            "action": "get_executions",
            "description": "Monitor execution results",
            "params": {
              "limit": 10
            }
          }
        ]
      },
      "nodeDiscovery": {
        "title": "Discover Community Nodes",
        "description": "Explore installed community nodes",
        "steps": [
          {
            "action": "discover_nodes",
            "description": "Refresh node discovery",
            "params": {
              "forceRefresh": true
            }
          },
          {
            "action": "get_community_nodes",
            "description": "List community nodes",
            "params": {}
          },
          {
            "action": "search_nodes",
            "description": "Search for specific functionality",
            "params": {
              "query": "email"
            }
          }
        ]
      }
    },
    "useCases": [
      "Automate data processing workflows",
      "Integration between multiple APIs and services",
      "Triggered actions based on webhooks or schedules",
      "Data transformation and enrichment pipelines",
      "Notification and alert systems",
      "Content management automation",
      "Customer onboarding workflows",
      "Report generation and distribution"
    ],
    "integrations": [
      "Claude Desktop",
      "Claude Code",
      "VS Code with MCP extensions",
      "Cursor IDE",
      "Custom MCP clients"
    ],
    "security": {
      "runAsNonRoot": true,
      "runAsUser": 1001,
      "readOnlyRootFilesystem": false,
      "allowPrivilegeEscalation": false,
      "securityContext": {
        "capabilities": {
          "drop": ["ALL"]
        }
      }
    },
    "resources": {
      "limits": {
        "cpu": "500m",
        "memory": "256Mi"
      },
      "requests": {
        "cpu": "100m",
        "memory": "128Mi"
      }
    }
  },
  "status": {
    "phase": "Available",
    "conditions": [
      {
        "type": "Verified",
        "status": "True",
        "reason": "SignatureValid",
        "message": "Container image signature verified"
      },
      {
        "type": "Tested",
        "status": "True",
        "reason": "TestsPassed",
        "message": "All integration tests passed"
      }
    ]
  }
}